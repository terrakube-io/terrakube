openapi: 3.0.1
info:
title: Elide Service
version: ''
servers:
  - url: /api/v1
tags:
  - name: access
  - name: action
  - name: address
  - name: agent
  - name: atomic
description: Atomic operations.
  - name: collection
  - name: github_app_token
  - name: globalvar
  - name: history
  - name: implementation
  - name: item
  - name: job
  - name: module
  - name: module_version
  - name: organization
  - name: provider
  - name: reference
  - name: schedule
  - name: ssh
  - name: step
  - name: tag
  - name: team
  - name: template
  - name: variable
  - name: vcs
  - name: version
  - name: webhook
  - name: webhook_event
  - name: workspace
  - name: workspacetag
paths:
/action:
get:
tags:
  - action
description: Returns the collection of type action
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - action
  - '-action'
  - active
  - '-active'
  - category
  - '-category'
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - displayCriteria
  - '-displayCriteria'
  - label
  - '-label'
  - name
  - '-name'
  - type
  - '-type'
  - updatedBy
  - '-updatedBy'
  - version
  - '-version'
  - id
  - '-id'
  - name: fields[action]
in: query
description: Selects the set of action fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - action
  - active
  - category
  - createdBy
  - createdDate
  - description
  - displayCriteria
  - label
  - name
  - type
  - updatedBy
  - updatedDate
  - version
  - name: filter[action]
in: query
description: Filters the collection of action using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of action using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/action'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - action
description: Creates an item of type action
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/action'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/action'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/action/{actionId}:
get:
tags:
  - action
description: Returns an instance of type action
parameters:
  - name: fields[action]
in: query
description: Selects the set of action fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - action
  - active
  - category
  - createdBy
  - createdDate
  - description
  - displayCriteria
  - label
  - name
  - type
  - updatedBy
  - updatedDate
  - version
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/action'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - action
description: Deletes an instance of type action
responses:
'204':
description: Successful response
patch:
tags:
  - action
description: Modifies an instance of type action
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/action'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: actionId
in: path
description: action Identifier
required: true
schema:
type: string
/address:
get:
tags:
  - address
description: Returns the collection of type address
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - name
  - '-name'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[address]
in: query
description: Filters the collection of address using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of address using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - address
description: Creates an item of type address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/address/{addressId}:
get:
tags:
  - address
description: Returns an instance of type address
parameters:
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - address
description: Deletes an instance of type address
responses:
'204':
description: Successful response
patch:
tags:
  - address
description: Modifies an instance of type address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
/address/{addressId}/job:
get:
tags:
  - job
description: Returns the relationship job
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - '-approvalTeam'
  - comments
  - '-comments'
  - commitId
  - '-commitId'
  - createdBy
  - '-createdBy'
  - output
  - '-output'
  - overrideBranch
  - '-overrideBranch'
  - planChanges
  - '-planChanges'
  - refresh
  - '-refresh'
  - refreshOnly
  - '-refreshOnly'
  - tcl
  - '-tcl'
  - templateReference
  - '-templateReference'
  - terraformPlan
  - '-terraformPlan'
  - updatedBy
  - '-updatedBy'
  - via
  - '-via'
  - id
  - '-id'
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - job
description: Creates an item of type job and adds it to job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
/address/{addressId}/job/{jobId}:
get:
tags:
  - job
description: Returns an instance of type job
parameters:
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - job
description: Deletes an instance of type job
responses:
'204':
description: Successful response
patch:
tags:
  - job
description: Modifies an instance of type job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/address/{addressId}/relationships/job:
get:
tags:
  - job
description: Returns the relationship identifiers for job
parameters:
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
patch:
tags:
  - job
description: Replaces the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
/address/{addressId}/job/{jobId}/step:
get:
tags:
  - step
description: Returns the relationship step
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - '-name'
  - output
  - '-output'
  - stepNumber
  - '-stepNumber'
  - id
  - '-id'
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[step]
in: query
description: Filters the collection of step using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - step
description: Creates an item of type step and adds it to step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/address/{addressId}/job/{jobId}/step/{stepId}:
get:
tags:
  - step
description: Returns an instance of type step
parameters:
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - step
description: Deletes an instance of type step
responses:
'204':
description: Successful response
patch:
tags:
  - step
description: Modifies an instance of type step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
/address/{addressId}/job/{jobId}/relationships/step:
get:
tags:
  - step
description: Returns the relationship identifiers for step
parameters:
  - name: filter[step]
in: query
description: Filters the collection of step using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
post:
tags:
  - step
description: Adds items to the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
delete:
tags:
  - step
description: Deletes items from the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - step
description: Replaces the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/github_app_token:
get:
tags:
  - github_app_token
description: Returns the collection of type github_app_token
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - appId
  - '-appId'
  - createdBy
  - '-createdBy'
  - installationId
  - '-installationId'
  - owner
  - '-owner'
  - token
  - '-token'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[github_app_token]
in: query
description: Selects the set of github_app_token fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - appId
  - createdBy
  - createdDate
  - installationId
  - owner
  - token
  - updatedBy
  - updatedDate
  - name: filter[github_app_token]
in: query
description: Filters the collection of github_app_token using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of github_app_token using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/github_app_token'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - github_app_token
description: Creates an item of type github_app_token
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/github_app_token'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/github_app_token'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/github_app_token/{github_app_tokenId}:
get:
tags:
  - github_app_token
description: Returns an instance of type github_app_token
parameters:
  - name: fields[github_app_token]
in: query
description: Selects the set of github_app_token fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - appId
  - createdBy
  - createdDate
  - installationId
  - owner
  - token
  - updatedBy
  - updatedDate
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/github_app_token'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - github_app_token
description: Deletes an instance of type github_app_token
responses:
'204':
description: Successful response
patch:
tags:
  - github_app_token
description: Modifies an instance of type github_app_token
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/github_app_token'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: github_app_tokenId
in: path
description: github_app_token Identifier
required: true
schema:
type: string
/implementation:
get:
tags:
  - implementation
description: Returns the collection of type implementation
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - arch
  - '-arch'
  - asciiArmor
  - '-asciiArmor'
  - downloadUrl
  - '-downloadUrl'
  - filename
  - '-filename'
  - keyId
  - '-keyId'
  - os
  - '-os'
  - shasum
  - '-shasum'
  - shasumsSignatureUrl
  - '-shasumsSignatureUrl'
  - shasumsUrl
  - '-shasumsUrl'
  - source
  - '-source'
  - sourceUrl
  - '-sourceUrl'
  - trustSignature
  - '-trustSignature'
  - id
  - '-id'
  - name: fields[implementation]
in: query
description: Selects the set of implementation fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - arch
  - asciiArmor
  - downloadUrl
  - filename
  - keyId
  - os
  - shasum
  - shasumsSignatureUrl
  - shasumsUrl
  - source
  - sourceUrl
  - trustSignature
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - version
  - name: filter[implementation]
in: query
description: Filters the collection of implementation using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of implementation using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - implementation
description: Creates an item of type implementation
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/implementation/{implementationId}:
get:
tags:
  - implementation
description: Returns an instance of type implementation
parameters:
  - name: fields[implementation]
in: query
description: Selects the set of implementation fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - arch
  - asciiArmor
  - downloadUrl
  - filename
  - keyId
  - os
  - shasum
  - shasumsSignatureUrl
  - shasumsUrl
  - source
  - sourceUrl
  - trustSignature
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - version
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - implementation
description: Deletes an instance of type implementation
responses:
'204':
description: Successful response
patch:
tags:
  - implementation
description: Modifies an instance of type implementation
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: implementationId
in: path
description: implementation Identifier
required: true
schema:
type: string
/implementation/{implementationId}/version:
get:
tags:
  - version
description: Returns the relationship version
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - protocols
  - '-protocols'
  - versionNumber
  - '-versionNumber'
  - id
  - '-id'
  - name: fields[version]
in: query
description: Selects the set of version fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - protocols
  - versionNumber
  - implementation
  - provider
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - implementation
  - provider
  - name: filter[version]
in: query
description: Filters the collection of version using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - version
description: Creates an item of type version and adds it to version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: implementationId
in: path
description: implementation Identifier
required: true
schema:
type: string
/implementation/{implementationId}/version/{versionId}:
get:
tags:
  - version
description: Returns an instance of type version
parameters:
  - name: fields[version]
in: query
description: Selects the set of version fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - protocols
  - versionNumber
  - implementation
  - provider
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - implementation
  - provider
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - version
description: Deletes an instance of type version
responses:
'204':
description: Successful response
patch:
tags:
  - version
description: Modifies an instance of type version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: implementationId
in: path
description: implementation Identifier
required: true
schema:
type: string
  - name: versionId
in: path
description: version Identifier
required: true
schema:
type: string
/implementation/{implementationId}/relationships/version:
get:
tags:
  - version
description: Returns the relationship identifiers for version
parameters:
  - name: filter[version]
in: query
description: Filters the collection of version using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - version
id:
type: string
patch:
tags:
  - version
description: Replaces the relationship version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - version
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: implementationId
in: path
description: implementation Identifier
required: true
schema:
type: string
/organization:
get:
tags:
  - organization
description: Returns the collection of type organization
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - disabled
  - '-disabled'
  - executionMode
  - '-executionMode'
  - icon
  - '-icon'
  - name
  - '-name'
  - id
  - '-id'
  - name: fields[organization]
in: query
description: Selects the set of organization fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - disabled
  - executionMode
  - icon
  - name
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: filter[organization]
in: query
description: Filters the collection of organization using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of organization using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - organization
description: Creates an item of type organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/organization/{organizationId}:
get:
tags:
  - organization
description: Returns an instance of type organization
parameters:
  - name: fields[organization]
in: query
description: Selects the set of organization fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - disabled
  - executionMode
  - icon
  - name
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - organization
description: Deletes an instance of type organization
responses:
'204':
description: Successful response
patch:
tags:
  - organization
description: Modifies an instance of type organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/agent:
get:
tags:
  - agent
description: Returns the relationship agent
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - name
  - '-name'
  - url
  - '-url'
  - id
  - '-id'
  - name: fields[agent]
in: query
description: Selects the set of agent fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - name
  - url
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[agent]
in: query
description: Filters the collection of agent using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - agent
description: Creates an item of type agent and adds it to agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/agent/{agentId}:
get:
tags:
  - agent
description: Returns an instance of type agent
parameters:
  - name: fields[agent]
in: query
description: Selects the set of agent fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - name
  - url
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - agent
description: Deletes an instance of type agent
responses:
'204':
description: Successful response
patch:
tags:
  - agent
description: Modifies an instance of type agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: agentId
in: path
description: agent Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/agent:
get:
tags:
  - agent
description: Returns the relationship identifiers for agent
parameters:
  - name: filter[agent]
in: query
description: Filters the collection of agent using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
post:
tags:
  - agent
description: Adds items to the relationship agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
delete:
tags:
  - agent
description: Deletes items from the relationship agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - agent
description: Replaces the relationship agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/collection:
get:
tags:
  - collection
description: Returns the relationship collection
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - name
  - '-name'
  - priority
  - '-priority'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[collection]
in: query
description: Selects the set of collection fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - priority
  - updatedBy
  - updatedDate
  - item
  - organization
  - reference
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - item
  - organization
  - reference
  - name: filter[collection]
in: query
description: Filters the collection of collection using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - collection
description: Creates an item of type collection and adds it to collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/collection/{collectionId}:
get:
tags:
  - collection
description: Returns an instance of type collection
parameters:
  - name: fields[collection]
in: query
description: Selects the set of collection fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - priority
  - updatedBy
  - updatedDate
  - item
  - organization
  - reference
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - item
  - organization
  - reference
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - collection
description: Deletes an instance of type collection
responses:
'204':
description: Successful response
patch:
tags:
  - collection
description: Modifies an instance of type collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/collection:
get:
tags:
  - collection
description: Returns the relationship identifiers for collection
parameters:
  - name: filter[collection]
in: query
description: Filters the collection of collection using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
post:
tags:
  - collection
description: Adds items to the relationship collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
delete:
tags:
  - collection
description: Deletes items from the relationship collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - collection
description: Replaces the relationship collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/globalvar:
get:
tags:
  - globalvar
description: Returns the relationship globalvar
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - hcl
  - '-hcl'
  - key
  - '-key'
  - sensitive
  - '-sensitive'
  - value
  - '-value'
  - id
  - '-id'
  - name: fields[globalvar]
in: query
description: Selects the set of globalvar fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[globalvar]
in: query
description: Filters the collection of globalvar using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/globalvar'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - globalvar
description: Creates an item of type globalvar and adds it to globalvar
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/globalvar'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/globalvar'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/globalvar/{globalvarId}:
get:
tags:
  - globalvar
description: Returns an instance of type globalvar
parameters:
  - name: fields[globalvar]
in: query
description: Selects the set of globalvar fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/globalvar'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - globalvar
description: Deletes an instance of type globalvar
responses:
'204':
description: Successful response
patch:
tags:
  - globalvar
description: Modifies an instance of type globalvar
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/globalvar'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: globalvarId
in: path
description: globalvar Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/globalvar:
get:
tags:
  - globalvar
description: Returns the relationship identifiers for globalvar
parameters:
  - name: filter[globalvar]
in: query
description: Filters the collection of globalvar using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - globalvar
id:
type: string
post:
tags:
  - globalvar
description: Adds items to the relationship globalvar
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - globalvar
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - globalvar
id:
type: string
delete:
tags:
  - globalvar
description: Deletes items from the relationship globalvar
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - globalvar
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - globalvar
description: Replaces the relationship globalvar
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - globalvar
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/job:
get:
tags:
  - job
description: Returns the relationship job
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - '-approvalTeam'
  - comments
  - '-comments'
  - commitId
  - '-commitId'
  - createdBy
  - '-createdBy'
  - output
  - '-output'
  - overrideBranch
  - '-overrideBranch'
  - planChanges
  - '-planChanges'
  - refresh
  - '-refresh'
  - refreshOnly
  - '-refreshOnly'
  - tcl
  - '-tcl'
  - templateReference
  - '-templateReference'
  - terraformPlan
  - '-terraformPlan'
  - updatedBy
  - '-updatedBy'
  - via
  - '-via'
  - id
  - '-id'
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - job
description: Creates an item of type job and adds it to job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/job/{jobId}:
get:
tags:
  - job
description: Returns an instance of type job
parameters:
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - job
description: Deletes an instance of type job
responses:
'204':
description: Successful response
patch:
tags:
  - job
description: Modifies an instance of type job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/job:
get:
tags:
  - job
description: Returns the relationship identifiers for job
parameters:
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
post:
tags:
  - job
description: Adds items to the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
delete:
tags:
  - job
description: Deletes items from the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - job
description: Replaces the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/module:
get:
tags:
  - module
description: Returns the relationship module
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - downloadQuantity
  - '-downloadQuantity'
  - folder
  - '-folder'
  - latestVersion
  - '-latestVersion'
  - name
  - '-name'
  - provider
  - '-provider'
  - registryPath
  - '-registryPath'
  - source
  - '-source'
  - tagPrefix
  - '-tagPrefix'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[module]
in: query
description: Selects the set of module fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - downloadQuantity
  - folder
  - latestVersion
  - name
  - provider
  - registryPath
  - source
  - tagPrefix
  - updatedBy
  - updatedDate
  - organization
  - ssh
  - vcs
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - ssh
  - vcs
  - version
  - name: filter[module]
in: query
description: Filters the collection of module using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/module'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - module
description: Creates an item of type module and adds it to module
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/module/{moduleId}:
get:
tags:
  - module
description: Returns an instance of type module
parameters:
  - name: fields[module]
in: query
description: Selects the set of module fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - downloadQuantity
  - folder
  - latestVersion
  - name
  - provider
  - registryPath
  - source
  - tagPrefix
  - updatedBy
  - updatedDate
  - organization
  - ssh
  - vcs
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - ssh
  - vcs
  - version
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - module
description: Deletes an instance of type module
responses:
'204':
description: Successful response
patch:
tags:
  - module
description: Modifies an instance of type module
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: moduleId
in: path
description: module Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/module:
get:
tags:
  - module
description: Returns the relationship identifiers for module
parameters:
  - name: filter[module]
in: query
description: Filters the collection of module using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module
id:
type: string
post:
tags:
  - module
description: Adds items to the relationship module
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module
id:
type: string
delete:
tags:
  - module
description: Deletes items from the relationship module
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - module
description: Replaces the relationship module
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/provider:
get:
tags:
  - provider
description: Returns the relationship provider
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - name
  - '-name'
  - id
  - '-id'
  - name: fields[provider]
in: query
description: Selects the set of provider fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - name
  - organization
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - version
  - name: filter[provider]
in: query
description: Filters the collection of provider using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/provider'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - provider
description: Creates an item of type provider and adds it to provider
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/provider'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/provider'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/provider/{providerId}:
get:
tags:
  - provider
description: Returns an instance of type provider
parameters:
  - name: fields[provider]
in: query
description: Selects the set of provider fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - name
  - organization
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - version
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/provider'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - provider
description: Deletes an instance of type provider
responses:
'204':
description: Successful response
patch:
tags:
  - provider
description: Modifies an instance of type provider
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/provider'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: providerId
in: path
description: provider Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/provider:
get:
tags:
  - provider
description: Returns the relationship identifiers for provider
parameters:
  - name: filter[provider]
in: query
description: Filters the collection of provider using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - provider
id:
type: string
post:
tags:
  - provider
description: Adds items to the relationship provider
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - provider
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - provider
id:
type: string
delete:
tags:
  - provider
description: Deletes items from the relationship provider
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - provider
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - provider
description: Replaces the relationship provider
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - provider
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/ssh:
get:
tags:
  - ssh
description: Returns the relationship ssh
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - name
  - '-name'
  - privateKey
  - '-privateKey'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[ssh]
in: query
description: Selects the set of ssh fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - privateKey
  - sshType
  - updatedBy
  - updatedDate
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[ssh]
in: query
description: Filters the collection of ssh using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - ssh
description: Creates an item of type ssh and adds it to ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/ssh/{sshId}:
get:
tags:
  - ssh
description: Returns an instance of type ssh
parameters:
  - name: fields[ssh]
in: query
description: Selects the set of ssh fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - privateKey
  - sshType
  - updatedBy
  - updatedDate
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - ssh
description: Deletes an instance of type ssh
responses:
'204':
description: Successful response
patch:
tags:
  - ssh
description: Modifies an instance of type ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: sshId
in: path
description: ssh Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/ssh:
get:
tags:
  - ssh
description: Returns the relationship identifiers for ssh
parameters:
  - name: filter[ssh]
in: query
description: Filters the collection of ssh using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
post:
tags:
  - ssh
description: Adds items to the relationship ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
delete:
tags:
  - ssh
description: Deletes items from the relationship ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - ssh
description: Replaces the relationship ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/tag:
get:
tags:
  - tag
description: Returns the relationship tag
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - name
  - '-name'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[tag]
in: query
description: Selects the set of tag fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[tag]
in: query
description: Filters the collection of tag using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/tag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - tag
description: Creates an item of type tag and adds it to tag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/tag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/tag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/tag/{tagId}:
get:
tags:
  - tag
description: Returns an instance of type tag
parameters:
  - name: fields[tag]
in: query
description: Selects the set of tag fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/tag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - tag
description: Deletes an instance of type tag
responses:
'204':
description: Successful response
patch:
tags:
  - tag
description: Modifies an instance of type tag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/tag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: tagId
in: path
description: tag Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/tag:
get:
tags:
  - tag
description: Returns the relationship identifiers for tag
parameters:
  - name: filter[tag]
in: query
description: Filters the collection of tag using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - tag
id:
type: string
post:
tags:
  - tag
description: Adds items to the relationship tag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - tag
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - tag
id:
type: string
delete:
tags:
  - tag
description: Deletes items from the relationship tag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - tag
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - tag
description: Replaces the relationship tag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - tag
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/team:
get:
tags:
  - team
description: Returns the relationship team
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - manageCollection
  - '-manageCollection'
  - manageJob
  - '-manageJob'
  - manageModule
  - '-manageModule'
  - manageProvider
  - '-manageProvider'
  - manageState
  - '-manageState'
  - manageTemplate
  - '-manageTemplate'
  - manageVcs
  - '-manageVcs'
  - manageWorkspace
  - '-manageWorkspace'
  - name
  - '-name'
  - id
  - '-id'
  - name: fields[team]
in: query
description: Selects the set of team fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - manageCollection
  - manageJob
  - manageModule
  - manageProvider
  - manageState
  - manageTemplate
  - manageVcs
  - manageWorkspace
  - name
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[team]
in: query
description: Filters the collection of team using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/team'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - team
description: Creates an item of type team and adds it to team
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/team'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/team'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/team/{teamId}:
get:
tags:
  - team
description: Returns an instance of type team
parameters:
  - name: fields[team]
in: query
description: Selects the set of team fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - manageCollection
  - manageJob
  - manageModule
  - manageProvider
  - manageState
  - manageTemplate
  - manageVcs
  - manageWorkspace
  - name
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/team'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - team
description: Deletes an instance of type team
responses:
'204':
description: Successful response
patch:
tags:
  - team
description: Modifies an instance of type team
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/team'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: teamId
in: path
description: team Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/team:
get:
tags:
  - team
description: Returns the relationship identifiers for team
parameters:
  - name: filter[team]
in: query
description: Filters the collection of team using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - team
id:
type: string
post:
tags:
  - team
description: Adds items to the relationship team
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - team
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - team
id:
type: string
delete:
tags:
  - team
description: Deletes items from the relationship team
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - team
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - team
description: Replaces the relationship team
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - team
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/template:
get:
tags:
  - template
description: Returns the relationship template
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - name
  - '-name'
  - tcl
  - '-tcl'
  - updatedBy
  - '-updatedBy'
  - version
  - '-version'
  - id
  - '-id'
  - name: fields[template]
in: query
description: Selects the set of template fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - tcl
  - updatedBy
  - updatedDate
  - version
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[template]
in: query
description: Filters the collection of template using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - template
description: Creates an item of type template and adds it to template
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/template/{templateId}:
get:
tags:
  - template
description: Returns an instance of type template
parameters:
  - name: fields[template]
in: query
description: Selects the set of template fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - tcl
  - updatedBy
  - updatedDate
  - version
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - template
description: Deletes an instance of type template
responses:
'204':
description: Successful response
patch:
tags:
  - template
description: Modifies an instance of type template
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: templateId
in: path
description: template Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/template:
get:
tags:
  - template
description: Returns the relationship identifiers for template
parameters:
  - name: filter[template]
in: query
description: Filters the collection of template using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - template
id:
type: string
post:
tags:
  - template
description: Adds items to the relationship template
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - template
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - template
id:
type: string
delete:
tags:
  - template
description: Deletes items from the relationship template
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - template
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - template
description: Replaces the relationship template
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - template
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/vcs:
get:
tags:
  - vcs
description: Returns the relationship vcs
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - accessToken
  - '-accessToken'
  - apiUrl
  - '-apiUrl'
  - callback
  - '-callback'
  - clientId
  - '-clientId'
  - clientSecret
  - '-clientSecret'
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - endpoint
  - '-endpoint'
  - name
  - '-name'
  - privateKey
  - '-privateKey'
  - redirectUrl
  - '-redirectUrl'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[vcs]
in: query
description: Selects the set of vcs fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - accessToken
  - apiUrl
  - callback
  - clientId
  - clientSecret
  - connectionType
  - createdBy
  - createdDate
  - description
  - endpoint
  - name
  - privateKey
  - redirectUrl
  - status
  - updatedBy
  - updatedDate
  - vcsType
  - organization
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - workspace
  - name: filter[vcs]
in: query
description: Filters the collection of vcs using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - vcs
description: Creates an item of type vcs and adds it to vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/vcs/{vcsId}:
get:
tags:
  - vcs
description: Returns an instance of type vcs
parameters:
  - name: fields[vcs]
in: query
description: Selects the set of vcs fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - accessToken
  - apiUrl
  - callback
  - clientId
  - clientSecret
  - connectionType
  - createdBy
  - createdDate
  - description
  - endpoint
  - name
  - privateKey
  - redirectUrl
  - status
  - updatedBy
  - updatedDate
  - vcsType
  - organization
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - vcs
description: Deletes an instance of type vcs
responses:
'204':
description: Successful response
patch:
tags:
  - vcs
description: Modifies an instance of type vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: vcsId
in: path
description: vcs Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/vcs:
get:
tags:
  - vcs
description: Returns the relationship identifiers for vcs
parameters:
  - name: filter[vcs]
in: query
description: Filters the collection of vcs using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
post:
tags:
  - vcs
description: Adds items to the relationship vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
delete:
tags:
  - vcs
description: Deletes items from the relationship vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - vcs
description: Replaces the relationship vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/workspace:
get:
tags:
  - workspace
description: Returns the relationship workspace
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - '-allowRemoteApply'
  - branch
  - '-branch'
  - createdBy
  - '-createdBy'
  - defaultTemplate
  - '-defaultTemplate'
  - deleted
  - '-deleted'
  - description
  - '-description'
  - executionMode
  - '-executionMode'
  - folder
  - '-folder'
  - iacType
  - '-iacType'
  - lockDescription
  - '-lockDescription'
  - locked
  - '-locked'
  - moduleSshKey
  - '-moduleSshKey'
  - name
  - '-name'
  - source
  - '-source'
  - terraformVersion
  - '-terraformVersion'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: filter[workspace]
in: query
description: Filters the collection of workspace using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - workspace
description: Creates an item of type workspace and adds it to workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/workspace/{workspaceId}:
get:
tags:
  - workspace
description: Returns an instance of type workspace
parameters:
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - workspace
description: Deletes an instance of type workspace
responses:
'204':
description: Successful response
patch:
tags:
  - workspace
description: Modifies an instance of type workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/organization/{organizationId}/relationships/workspace:
get:
tags:
  - workspace
description: Returns the relationship identifiers for workspace
parameters:
  - name: filter[workspace]
in: query
description: Filters the collection of workspace using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
post:
tags:
  - workspace
description: Adds items to the relationship workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
delete:
tags:
  - workspace
description: Deletes items from the relationship workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - workspace
description: Replaces the relationship workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/organization/{organizationId}/collection/{collectionId}/item:
get:
tags:
  - item
description: Returns the relationship item
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - hcl
  - '-hcl'
  - key
  - '-key'
  - sensitive
  - '-sensitive'
  - value
  - '-value'
  - id
  - '-id'
  - name: fields[item]
in: query
description: Selects the set of item fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - collection
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
  - name: filter[item]
in: query
description: Filters the collection of item using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - item
description: Creates an item of type item and adds it to item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
/organization/{organizationId}/collection/{collectionId}/item/{itemId}:
get:
tags:
  - item
description: Returns an instance of type item
parameters:
  - name: fields[item]
in: query
description: Selects the set of item fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - collection
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - item
description: Deletes an instance of type item
responses:
'204':
description: Successful response
patch:
tags:
  - item
description: Modifies an instance of type item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
  - name: itemId
in: path
description: item Identifier
required: true
schema:
type: string
/organization/{organizationId}/collection/{collectionId}/relationships/item:
get:
tags:
  - item
description: Returns the relationship identifiers for item
parameters:
  - name: filter[item]
in: query
description: Filters the collection of item using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
post:
tags:
  - item
description: Adds items to the relationship item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
delete:
tags:
  - item
description: Deletes items from the relationship item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - item
description: Replaces the relationship item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
/organization/{organizationId}/job/{jobId}/address:
get:
tags:
  - address
description: Returns the relationship address
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - name
  - '-name'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[address]
in: query
description: Filters the collection of address using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - address
description: Creates an item of type address and adds it to address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/organization/{organizationId}/job/{jobId}/address/{addressId}:
get:
tags:
  - address
description: Returns an instance of type address
parameters:
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - address
description: Deletes an instance of type address
responses:
'204':
description: Successful response
patch:
tags:
  - address
description: Modifies an instance of type address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
/organization/{organizationId}/job/{jobId}/relationships/address:
get:
tags:
  - address
description: Returns the relationship identifiers for address
parameters:
  - name: filter[address]
in: query
description: Filters the collection of address using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
post:
tags:
  - address
description: Adds items to the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
delete:
tags:
  - address
description: Deletes items from the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - address
description: Replaces the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/organization/{organizationId}/job/{jobId}/step:
get:
tags:
  - step
description: Returns the relationship step
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - '-name'
  - output
  - '-output'
  - stepNumber
  - '-stepNumber'
  - id
  - '-id'
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[step]
in: query
description: Filters the collection of step using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - step
description: Creates an item of type step and adds it to step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/organization/{organizationId}/job/{jobId}/step/{stepId}:
get:
tags:
  - step
description: Returns an instance of type step
parameters:
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - step
description: Deletes an instance of type step
responses:
'204':
description: Successful response
patch:
tags:
  - step
description: Modifies an instance of type step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
/organization/{organizationId}/job/{jobId}/relationships/step:
get:
tags:
  - step
description: Returns the relationship identifiers for step
parameters:
  - name: filter[step]
in: query
description: Filters the collection of step using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
post:
tags:
  - step
description: Adds items to the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
delete:
tags:
  - step
description: Deletes items from the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - step
description: Replaces the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/organization/{organizationId}/module/{moduleId}/version:
get:
tags:
  - module_version
description: Returns the relationship version
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - commit
  - '-commit'
  - version
  - '-version'
  - id
  - '-id'
  - name: fields[module_version]
in: query
description: Selects the set of module_version fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - commit
  - version
  - module
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - module
  - name: filter[module_version]
in: query
description: Filters the collection of module_version using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/module_version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - module_version
description: Creates an item of type module_version and adds it to version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module_version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module_version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: moduleId
in: path
description: module Identifier
required: true
schema:
type: string
/organization/{organizationId}/module/{moduleId}/version/{module_versionId}:
get:
tags:
  - module_version
description: Returns an instance of type module_version
parameters:
  - name: fields[module_version]
in: query
description: Selects the set of module_version fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - commit
  - version
  - module
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - module
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module_version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - module_version
description: Deletes an instance of type module_version
responses:
'204':
description: Successful response
patch:
tags:
  - module_version
description: Modifies an instance of type module_version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/module_version'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: moduleId
in: path
description: module Identifier
required: true
schema:
type: string
  - name: module_versionId
in: path
description: module_version Identifier
required: true
schema:
type: string
/organization/{organizationId}/module/{moduleId}/relationships/version:
get:
tags:
  - module_version
description: Returns the relationship identifiers for version
parameters:
  - name: filter[module_version]
in: query
description: Filters the collection of module_version using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module_version
id:
type: string
post:
tags:
  - module_version
description: Adds items to the relationship version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module_version
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module_version
id:
type: string
delete:
tags:
  - module_version
description: Deletes items from the relationship version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module_version
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - module_version
description: Replaces the relationship version
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module_version
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: moduleId
in: path
description: module Identifier
required: true
schema:
type: string
/organization/{organizationId}/provider/{providerId}/version/{versionId}/implementation:
get:
tags:
  - implementation
description: Returns the relationship implementation
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - arch
  - '-arch'
  - asciiArmor
  - '-asciiArmor'
  - downloadUrl
  - '-downloadUrl'
  - filename
  - '-filename'
  - keyId
  - '-keyId'
  - os
  - '-os'
  - shasum
  - '-shasum'
  - shasumsSignatureUrl
  - '-shasumsSignatureUrl'
  - shasumsUrl
  - '-shasumsUrl'
  - source
  - '-source'
  - sourceUrl
  - '-sourceUrl'
  - trustSignature
  - '-trustSignature'
  - id
  - '-id'
  - name: fields[implementation]
in: query
description: Selects the set of implementation fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - arch
  - asciiArmor
  - downloadUrl
  - filename
  - keyId
  - os
  - shasum
  - shasumsSignatureUrl
  - shasumsUrl
  - source
  - sourceUrl
  - trustSignature
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - version
  - name: filter[implementation]
in: query
description: Filters the collection of implementation using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - implementation
description: Creates an item of type implementation and adds it to implementation
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: providerId
in: path
description: provider Identifier
required: true
schema:
type: string
  - name: versionId
in: path
description: version Identifier
required: true
schema:
type: string
/organization/{organizationId}/provider/{providerId}/version/{versionId}/implementation/{implementationId}:
get:
tags:
  - implementation
description: Returns an instance of type implementation
parameters:
  - name: fields[implementation]
in: query
description: Selects the set of implementation fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - arch
  - asciiArmor
  - downloadUrl
  - filename
  - keyId
  - os
  - shasum
  - shasumsSignatureUrl
  - shasumsUrl
  - source
  - sourceUrl
  - trustSignature
  - version
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - version
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - implementation
description: Deletes an instance of type implementation
responses:
'204':
description: Successful response
patch:
tags:
  - implementation
description: Modifies an instance of type implementation
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/implementation'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: providerId
in: path
description: provider Identifier
required: true
schema:
type: string
  - name: versionId
in: path
description: version Identifier
required: true
schema:
type: string
  - name: implementationId
in: path
description: implementation Identifier
required: true
schema:
type: string
/organization/{organizationId}/provider/{providerId}/version/{versionId}/relationships/implementation:
get:
tags:
  - implementation
description: Returns the relationship identifiers for implementation
parameters:
  - name: filter[implementation]
in: query
description: Filters the collection of implementation using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - implementation
id:
type: string
post:
tags:
  - implementation
description: Adds items to the relationship implementation
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - implementation
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - implementation
id:
type: string
delete:
tags:
  - implementation
description: Deletes items from the relationship implementation
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - implementation
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - implementation
description: Replaces the relationship implementation
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - implementation
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
  - name: providerId
in: path
description: provider Identifier
required: true
schema:
type: string
  - name: versionId
in: path
description: version Identifier
required: true
schema:
type: string
/reference:
get:
tags:
  - reference
description: Returns the collection of type reference
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - id
  - '-id'
  - name: fields[reference]
in: query
description: Selects the set of reference fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - collection
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
  - workspace
  - name: filter[reference]
in: query
description: Filters the collection of reference using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of reference using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - reference
description: Creates an item of type reference
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/reference/{referenceId}:
get:
tags:
  - reference
description: Returns an instance of type reference
parameters:
  - name: fields[reference]
in: query
description: Selects the set of reference fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - collection
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - reference
description: Deletes an instance of type reference
responses:
'204':
description: Successful response
patch:
tags:
  - reference
description: Modifies an instance of type reference
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
/reference/{referenceId}/collection:
get:
tags:
  - collection
description: Returns the relationship collection
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - name
  - '-name'
  - priority
  - '-priority'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[collection]
in: query
description: Selects the set of collection fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - priority
  - updatedBy
  - updatedDate
  - item
  - organization
  - reference
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - item
  - organization
  - reference
  - name: filter[collection]
in: query
description: Filters the collection of collection using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - collection
description: Creates an item of type collection and adds it to collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
/reference/{referenceId}/collection/{collectionId}:
get:
tags:
  - collection
description: Returns an instance of type collection
parameters:
  - name: fields[collection]
in: query
description: Selects the set of collection fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - priority
  - updatedBy
  - updatedDate
  - item
  - organization
  - reference
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - item
  - organization
  - reference
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - collection
description: Deletes an instance of type collection
responses:
'204':
description: Successful response
patch:
tags:
  - collection
description: Modifies an instance of type collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/collection'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
/reference/{referenceId}/relationships/collection:
get:
tags:
  - collection
description: Returns the relationship identifiers for collection
parameters:
  - name: filter[collection]
in: query
description: Filters the collection of collection using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
patch:
tags:
  - collection
description: Replaces the relationship collection
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
/reference/{referenceId}/workspace:
get:
tags:
  - workspace
description: Returns the relationship workspace
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - '-allowRemoteApply'
  - branch
  - '-branch'
  - createdBy
  - '-createdBy'
  - defaultTemplate
  - '-defaultTemplate'
  - deleted
  - '-deleted'
  - description
  - '-description'
  - executionMode
  - '-executionMode'
  - folder
  - '-folder'
  - iacType
  - '-iacType'
  - lockDescription
  - '-lockDescription'
  - locked
  - '-locked'
  - moduleSshKey
  - '-moduleSshKey'
  - name
  - '-name'
  - source
  - '-source'
  - terraformVersion
  - '-terraformVersion'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: filter[workspace]
in: query
description: Filters the collection of workspace using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - workspace
description: Creates an item of type workspace and adds it to workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
/reference/{referenceId}/workspace/{workspaceId}:
get:
tags:
  - workspace
description: Returns an instance of type workspace
parameters:
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - workspace
description: Deletes an instance of type workspace
responses:
'204':
description: Successful response
patch:
tags:
  - workspace
description: Modifies an instance of type workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/reference/{referenceId}/relationships/workspace:
get:
tags:
  - workspace
description: Returns the relationship identifiers for workspace
parameters:
  - name: filter[workspace]
in: query
description: Filters the collection of workspace using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
patch:
tags:
  - workspace
description: Replaces the relationship workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
/reference/{referenceId}/collection/{collectionId}/item:
get:
tags:
  - item
description: Returns the relationship item
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - hcl
  - '-hcl'
  - key
  - '-key'
  - sensitive
  - '-sensitive'
  - value
  - '-value'
  - id
  - '-id'
  - name: fields[item]
in: query
description: Selects the set of item fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - collection
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
  - name: filter[item]
in: query
description: Filters the collection of item using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - item
description: Creates an item of type item and adds it to item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
/reference/{referenceId}/collection/{collectionId}/item/{itemId}:
get:
tags:
  - item
description: Returns an instance of type item
parameters:
  - name: fields[item]
in: query
description: Selects the set of item fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - collection
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - item
description: Deletes an instance of type item
responses:
'204':
description: Successful response
patch:
tags:
  - item
description: Modifies an instance of type item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/item'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
  - name: itemId
in: path
description: item Identifier
required: true
schema:
type: string
/reference/{referenceId}/collection/{collectionId}/relationships/item:
get:
tags:
  - item
description: Returns the relationship identifiers for item
parameters:
  - name: filter[item]
in: query
description: Filters the collection of item using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
post:
tags:
  - item
description: Adds items to the relationship item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
delete:
tags:
  - item
description: Deletes items from the relationship item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - item
description: Replaces the relationship item
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
  - name: collectionId
in: path
description: collection Identifier
required: true
schema:
type: string
/step:
get:
tags:
  - step
description: Returns the collection of type step
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - '-name'
  - output
  - '-output'
  - stepNumber
  - '-stepNumber'
  - id
  - '-id'
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[step]
in: query
description: Filters the collection of step using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of step using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - step
description: Creates an item of type step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/step/{stepId}:
get:
tags:
  - step
description: Returns an instance of type step
parameters:
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - step
description: Deletes an instance of type step
responses:
'204':
description: Successful response
patch:
tags:
  - step
description: Modifies an instance of type step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
/step/{stepId}/job:
get:
tags:
  - job
description: Returns the relationship job
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - '-approvalTeam'
  - comments
  - '-comments'
  - commitId
  - '-commitId'
  - createdBy
  - '-createdBy'
  - output
  - '-output'
  - overrideBranch
  - '-overrideBranch'
  - planChanges
  - '-planChanges'
  - refresh
  - '-refresh'
  - refreshOnly
  - '-refreshOnly'
  - tcl
  - '-tcl'
  - templateReference
  - '-templateReference'
  - terraformPlan
  - '-terraformPlan'
  - updatedBy
  - '-updatedBy'
  - via
  - '-via'
  - id
  - '-id'
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - job
description: Creates an item of type job and adds it to job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
/step/{stepId}/job/{jobId}:
get:
tags:
  - job
description: Returns an instance of type job
parameters:
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - job
description: Deletes an instance of type job
responses:
'204':
description: Successful response
patch:
tags:
  - job
description: Modifies an instance of type job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/step/{stepId}/relationships/job:
get:
tags:
  - job
description: Returns the relationship identifiers for job
parameters:
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
patch:
tags:
  - job
description: Replaces the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
/step/{stepId}/job/{jobId}/address:
get:
tags:
  - address
description: Returns the relationship address
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - name
  - '-name'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[address]
in: query
description: Filters the collection of address using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - address
description: Creates an item of type address and adds it to address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/step/{stepId}/job/{jobId}/address/{addressId}:
get:
tags:
  - address
description: Returns an instance of type address
parameters:
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - address
description: Deletes an instance of type address
responses:
'204':
description: Successful response
patch:
tags:
  - address
description: Modifies an instance of type address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
/step/{stepId}/job/{jobId}/relationships/address:
get:
tags:
  - address
description: Returns the relationship identifiers for address
parameters:
  - name: filter[address]
in: query
description: Filters the collection of address using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
post:
tags:
  - address
description: Adds items to the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
delete:
tags:
  - address
description: Deletes items from the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - address
description: Replaces the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/template:
get:
tags:
  - template
description: Returns the collection of type template
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - name
  - '-name'
  - tcl
  - '-tcl'
  - updatedBy
  - '-updatedBy'
  - version
  - '-version'
  - id
  - '-id'
  - name: fields[template]
in: query
description: Selects the set of template fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - tcl
  - updatedBy
  - updatedDate
  - version
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[template]
in: query
description: Filters the collection of template using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of template using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - template
description: Creates an item of type template
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/template/{templateId}:
get:
tags:
  - template
description: Returns an instance of type template
parameters:
  - name: fields[template]
in: query
description: Selects the set of template fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - tcl
  - updatedBy
  - updatedDate
  - version
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - template
description: Deletes an instance of type template
responses:
'204':
description: Successful response
patch:
tags:
  - template
description: Modifies an instance of type template
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/template'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: templateId
in: path
description: template Identifier
required: true
schema:
type: string
/template/{templateId}/organization:
get:
tags:
  - organization
description: Returns the relationship organization
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - disabled
  - '-disabled'
  - executionMode
  - '-executionMode'
  - icon
  - '-icon'
  - name
  - '-name'
  - id
  - '-id'
  - name: fields[organization]
in: query
description: Selects the set of organization fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - disabled
  - executionMode
  - icon
  - name
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: filter[organization]
in: query
description: Filters the collection of organization using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - organization
description: Creates an item of type organization and adds it to organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: templateId
in: path
description: template Identifier
required: true
schema:
type: string
/template/{templateId}/organization/{organizationId}:
get:
tags:
  - organization
description: Returns an instance of type organization
parameters:
  - name: fields[organization]
in: query
description: Selects the set of organization fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - disabled
  - executionMode
  - icon
  - name
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - organization
description: Deletes an instance of type organization
responses:
'204':
description: Successful response
patch:
tags:
  - organization
description: Modifies an instance of type organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: templateId
in: path
description: template Identifier
required: true
schema:
type: string
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/template/{templateId}/relationships/organization:
get:
tags:
  - organization
description: Returns the relationship identifiers for organization
parameters:
  - name: filter[organization]
in: query
description: Filters the collection of organization using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
patch:
tags:
  - organization
description: Replaces the relationship organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: templateId
in: path
description: template Identifier
required: true
schema:
type: string
/webhook:
get:
tags:
  - webhook
description: Returns the collection of type webhook
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - remoteHookId
  - '-remoteHookId'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[webhook]
in: query
description: Selects the set of webhook fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - remoteHookId
  - updatedBy
  - updatedDate
  - events
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - events
  - workspace
  - name: filter[webhook]
in: query
description: Filters the collection of webhook using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of webhook using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - webhook
description: Creates an item of type webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/webhook/{webhookId}:
get:
tags:
  - webhook
description: Returns an instance of type webhook
parameters:
  - name: fields[webhook]
in: query
description: Selects the set of webhook fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - remoteHookId
  - updatedBy
  - updatedDate
  - events
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - events
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - webhook
description: Deletes an instance of type webhook
responses:
'204':
description: Successful response
patch:
tags:
  - webhook
description: Modifies an instance of type webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
/webhook/{webhookId}/events:
get:
tags:
  - webhook_event
description: Returns the relationship events
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - branch
  - '-branch'
  - createdBy
  - '-createdBy'
  - path
  - '-path'
  - priority
  - '-priority'
  - templateId
  - '-templateId'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[webhook_event]
in: query
description: Selects the set of webhook_event fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - branch
  - createdBy
  - createdDate
  - event
  - path
  - priority
  - templateId
  - updatedBy
  - updatedDate
  - webhook
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - webhook
  - name: filter[webhook_event]
in: query
description: Filters the collection of webhook_event using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - webhook_event
description: Creates an item of type webhook_event and adds it to events
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
/webhook/{webhookId}/events/{webhook_eventId}:
get:
tags:
  - webhook_event
description: Returns an instance of type webhook_event
parameters:
  - name: fields[webhook_event]
in: query
description: Selects the set of webhook_event fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - branch
  - createdBy
  - createdDate
  - event
  - path
  - priority
  - templateId
  - updatedBy
  - updatedDate
  - webhook
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - webhook
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - webhook_event
description: Deletes an instance of type webhook_event
responses:
'204':
description: Successful response
patch:
tags:
  - webhook_event
description: Modifies an instance of type webhook_event
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
  - name: webhook_eventId
in: path
description: webhook_event Identifier
required: true
schema:
type: string
/webhook/{webhookId}/relationships/events:
get:
tags:
  - webhook_event
description: Returns the relationship identifiers for events
parameters:
  - name: filter[webhook_event]
in: query
description: Filters the collection of webhook_event using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook_event
id:
type: string
post:
tags:
  - webhook_event
description: Adds items to the relationship events
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook_event
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook_event
id:
type: string
delete:
tags:
  - webhook_event
description: Deletes items from the relationship events
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook_event
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - webhook_event
description: Replaces the relationship events
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook_event
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
/webhook/{webhookId}/workspace:
get:
tags:
  - workspace
description: Returns the relationship workspace
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - '-allowRemoteApply'
  - branch
  - '-branch'
  - createdBy
  - '-createdBy'
  - defaultTemplate
  - '-defaultTemplate'
  - deleted
  - '-deleted'
  - description
  - '-description'
  - executionMode
  - '-executionMode'
  - folder
  - '-folder'
  - iacType
  - '-iacType'
  - lockDescription
  - '-lockDescription'
  - locked
  - '-locked'
  - moduleSshKey
  - '-moduleSshKey'
  - name
  - '-name'
  - source
  - '-source'
  - terraformVersion
  - '-terraformVersion'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: filter[workspace]
in: query
description: Filters the collection of workspace using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - workspace
description: Creates an item of type workspace and adds it to workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
/webhook/{webhookId}/workspace/{workspaceId}:
get:
tags:
  - workspace
description: Returns an instance of type workspace
parameters:
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - workspace
description: Deletes an instance of type workspace
responses:
'204':
description: Successful response
patch:
tags:
  - workspace
description: Modifies an instance of type workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/webhook/{webhookId}/relationships/workspace:
get:
tags:
  - workspace
description: Returns the relationship identifiers for workspace
parameters:
  - name: filter[workspace]
in: query
description: Filters the collection of workspace using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
patch:
tags:
  - workspace
description: Replaces the relationship workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
/webhook_event:
get:
tags:
  - webhook_event
description: Returns the collection of type webhook_event
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - branch
  - '-branch'
  - createdBy
  - '-createdBy'
  - path
  - '-path'
  - priority
  - '-priority'
  - templateId
  - '-templateId'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[webhook_event]
in: query
description: Selects the set of webhook_event fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - branch
  - createdBy
  - createdDate
  - event
  - path
  - priority
  - templateId
  - updatedBy
  - updatedDate
  - webhook
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - webhook
  - name: filter[webhook_event]
in: query
description: Filters the collection of webhook_event using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of webhook_event using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - webhook_event
description: Creates an item of type webhook_event
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/webhook_event/{webhook_eventId}:
get:
tags:
  - webhook_event
description: Returns an instance of type webhook_event
parameters:
  - name: fields[webhook_event]
in: query
description: Selects the set of webhook_event fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - branch
  - createdBy
  - createdDate
  - event
  - path
  - priority
  - templateId
  - updatedBy
  - updatedDate
  - webhook
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - webhook
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - webhook_event
description: Deletes an instance of type webhook_event
responses:
'204':
description: Successful response
patch:
tags:
  - webhook_event
description: Modifies an instance of type webhook_event
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook_event'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: webhook_eventId
in: path
description: webhook_event Identifier
required: true
schema:
type: string
/webhook_event/{webhook_eventId}/webhook:
get:
tags:
  - webhook
description: Returns the relationship webhook
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - remoteHookId
  - '-remoteHookId'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[webhook]
in: query
description: Selects the set of webhook fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - remoteHookId
  - updatedBy
  - updatedDate
  - events
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - events
  - workspace
  - name: filter[webhook]
in: query
description: Filters the collection of webhook using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - webhook
description: Creates an item of type webhook and adds it to webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: webhook_eventId
in: path
description: webhook_event Identifier
required: true
schema:
type: string
/webhook_event/{webhook_eventId}/webhook/{webhookId}:
get:
tags:
  - webhook
description: Returns an instance of type webhook
parameters:
  - name: fields[webhook]
in: query
description: Selects the set of webhook fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - remoteHookId
  - updatedBy
  - updatedDate
  - events
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - events
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - webhook
description: Deletes an instance of type webhook
responses:
'204':
description: Successful response
patch:
tags:
  - webhook
description: Modifies an instance of type webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: webhook_eventId
in: path
description: webhook_event Identifier
required: true
schema:
type: string
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
/webhook_event/{webhook_eventId}/relationships/webhook:
get:
tags:
  - webhook
description: Returns the relationship identifiers for webhook
parameters:
  - name: filter[webhook]
in: query
description: Filters the collection of webhook using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - webhook
id:
type: string
patch:
tags:
  - webhook
description: Replaces the relationship webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - webhook
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: webhook_eventId
in: path
description: webhook_event Identifier
required: true
schema:
type: string
/workspace:
get:
tags:
  - workspace
description: Returns the collection of type workspace
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - '-allowRemoteApply'
  - branch
  - '-branch'
  - createdBy
  - '-createdBy'
  - defaultTemplate
  - '-defaultTemplate'
  - deleted
  - '-deleted'
  - description
  - '-description'
  - executionMode
  - '-executionMode'
  - folder
  - '-folder'
  - iacType
  - '-iacType'
  - lockDescription
  - '-lockDescription'
  - locked
  - '-locked'
  - moduleSshKey
  - '-moduleSshKey'
  - name
  - '-name'
  - source
  - '-source'
  - terraformVersion
  - '-terraformVersion'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: filter[workspace]
in: query
description: Filters the collection of workspace using a 'disjoint' RSQL expression
schema:
type: string
  - name: filter
in: query
description: Filters the collection of workspace using a 'joined' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - workspace
description: Creates an item of type workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
/workspace/{workspaceId}:
get:
tags:
  - workspace
description: Returns an instance of type workspace
parameters:
  - name: fields[workspace]
in: query
description: Selects the set of workspace fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - allowRemoteApply
  - branch
  - createdBy
  - createdDate
  - defaultTemplate
  - deleted
  - description
  - executionMode
  - folder
  - iacType
  - lockDescription
  - locked
  - moduleSshKey
  - name
  - source
  - terraformVersion
  - updatedBy
  - updatedDate
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - access
  - agent
  - history
  - job
  - organization
  - reference
  - schedule
  - ssh
  - variable
  - vcs
  - webhook
  - workspaceTag
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - workspace
description: Deletes an instance of type workspace
responses:
'204':
description: Successful response
patch:
tags:
  - workspace
description: Modifies an instance of type workspace
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspace'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/access:
get:
tags:
  - access
description: Returns the relationship access
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - manageJob
  - '-manageJob'
  - manageState
  - '-manageState'
  - manageWorkspace
  - '-manageWorkspace'
  - name
  - '-name'
  - id
  - '-id'
  - name: fields[access]
in: query
description: Selects the set of access fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - manageJob
  - manageState
  - manageWorkspace
  - name
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
  - name: filter[access]
in: query
description: Filters the collection of access using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/access'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - access
description: Creates an item of type access and adds it to access
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/access'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/access'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/access/{accessId}:
get:
tags:
  - access
description: Returns an instance of type access
parameters:
  - name: fields[access]
in: query
description: Selects the set of access fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - manageJob
  - manageState
  - manageWorkspace
  - name
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/access'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - access
description: Deletes an instance of type access
responses:
'204':
description: Successful response
patch:
tags:
  - access
description: Modifies an instance of type access
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/access'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: accessId
in: path
description: access Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/access:
get:
tags:
  - access
description: Returns the relationship identifiers for access
parameters:
  - name: filter[access]
in: query
description: Filters the collection of access using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - access
id:
type: string
post:
tags:
  - access
description: Adds items to the relationship access
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - access
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - access
id:
type: string
delete:
tags:
  - access
description: Deletes items from the relationship access
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - access
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - access
description: Replaces the relationship access
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - access
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/agent:
get:
tags:
  - agent
description: Returns the relationship agent
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - name
  - '-name'
  - url
  - '-url'
  - id
  - '-id'
  - name: fields[agent]
in: query
description: Selects the set of agent fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - name
  - url
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[agent]
in: query
description: Filters the collection of agent using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - agent
description: Creates an item of type agent and adds it to agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/agent/{agentId}:
get:
tags:
  - agent
description: Returns an instance of type agent
parameters:
  - name: fields[agent]
in: query
description: Selects the set of agent fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - name
  - url
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - agent
description: Deletes an instance of type agent
responses:
'204':
description: Successful response
patch:
tags:
  - agent
description: Modifies an instance of type agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/agent'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: agentId
in: path
description: agent Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/agent:
get:
tags:
  - agent
description: Returns the relationship identifiers for agent
parameters:
  - name: filter[agent]
in: query
description: Filters the collection of agent using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
patch:
tags:
  - agent
description: Replaces the relationship agent
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/history:
get:
tags:
  - history
description: Returns the relationship history
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - jobReference
  - '-jobReference'
  - lineage
  - '-lineage'
  - md5
  - '-md5'
  - output
  - '-output'
  - serial
  - '-serial'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[history]
in: query
description: Selects the set of history fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - jobReference
  - lineage
  - md5
  - output
  - serial
  - updatedBy
  - updatedDate
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
  - name: filter[history]
in: query
description: Filters the collection of history using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/history'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - history
description: Creates an item of type history and adds it to history
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/history'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/history'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/history/{historyId}:
get:
tags:
  - history
description: Returns an instance of type history
parameters:
  - name: fields[history]
in: query
description: Selects the set of history fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - jobReference
  - lineage
  - md5
  - output
  - serial
  - updatedBy
  - updatedDate
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/history'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - history
description: Deletes an instance of type history
responses:
'204':
description: Successful response
patch:
tags:
  - history
description: Modifies an instance of type history
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/history'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: historyId
in: path
description: history Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/history:
get:
tags:
  - history
description: Returns the relationship identifiers for history
parameters:
  - name: filter[history]
in: query
description: Filters the collection of history using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - history
id:
type: string
post:
tags:
  - history
description: Adds items to the relationship history
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - history
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - history
id:
type: string
delete:
tags:
  - history
description: Deletes items from the relationship history
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - history
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - history
description: Replaces the relationship history
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - history
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job:
get:
tags:
  - job
description: Returns the relationship job
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - '-approvalTeam'
  - comments
  - '-comments'
  - commitId
  - '-commitId'
  - createdBy
  - '-createdBy'
  - output
  - '-output'
  - overrideBranch
  - '-overrideBranch'
  - planChanges
  - '-planChanges'
  - refresh
  - '-refresh'
  - refreshOnly
  - '-refreshOnly'
  - tcl
  - '-tcl'
  - templateReference
  - '-templateReference'
  - terraformPlan
  - '-terraformPlan'
  - updatedBy
  - '-updatedBy'
  - via
  - '-via'
  - id
  - '-id'
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - job
description: Creates an item of type job and adds it to job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job/{jobId}:
get:
tags:
  - job
description: Returns an instance of type job
parameters:
  - name: fields[job]
in: query
description: Selects the set of job fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - approvalTeam
  - comments
  - commitId
  - createdBy
  - createdDate
  - output
  - overrideBranch
  - planChanges
  - refresh
  - refreshOnly
  - status
  - tcl
  - templateReference
  - terraformPlan
  - updatedBy
  - updatedDate
  - via
  - address
  - organization
  - step
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - address
  - organization
  - step
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - job
description: Deletes an instance of type job
responses:
'204':
description: Successful response
patch:
tags:
  - job
description: Modifies an instance of type job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/job'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/job:
get:
tags:
  - job
description: Returns the relationship identifiers for job
parameters:
  - name: filter[job]
in: query
description: Filters the collection of job using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
post:
tags:
  - job
description: Adds items to the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
delete:
tags:
  - job
description: Deletes items from the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - job
description: Replaces the relationship job
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/organization:
get:
tags:
  - organization
description: Returns the relationship organization
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - disabled
  - '-disabled'
  - executionMode
  - '-executionMode'
  - icon
  - '-icon'
  - name
  - '-name'
  - id
  - '-id'
  - name: fields[organization]
in: query
description: Selects the set of organization fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - disabled
  - executionMode
  - icon
  - name
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: filter[organization]
in: query
description: Filters the collection of organization using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - organization
description: Creates an item of type organization and adds it to organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/organization/{organizationId}:
get:
tags:
  - organization
description: Returns an instance of type organization
parameters:
  - name: fields[organization]
in: query
description: Selects the set of organization fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - disabled
  - executionMode
  - icon
  - name
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - agent
  - collection
  - globalvar
  - job
  - module
  - provider
  - ssh
  - tag
  - team
  - template
  - vcs
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - organization
description: Deletes an instance of type organization
responses:
'204':
description: Successful response
patch:
tags:
  - organization
description: Modifies an instance of type organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/organization'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: organizationId
in: path
description: organization Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/organization:
get:
tags:
  - organization
description: Returns the relationship identifiers for organization
parameters:
  - name: filter[organization]
in: query
description: Filters the collection of organization using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
patch:
tags:
  - organization
description: Replaces the relationship organization
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/reference:
get:
tags:
  - reference
description: Returns the relationship reference
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - id
  - '-id'
  - name: fields[reference]
in: query
description: Selects the set of reference fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - collection
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
  - workspace
  - name: filter[reference]
in: query
description: Filters the collection of reference using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - reference
description: Creates an item of type reference and adds it to reference
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/reference/{referenceId}:
get:
tags:
  - reference
description: Returns an instance of type reference
parameters:
  - name: fields[reference]
in: query
description: Selects the set of reference fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - collection
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - collection
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - reference
description: Deletes an instance of type reference
responses:
'204':
description: Successful response
patch:
tags:
  - reference
description: Modifies an instance of type reference
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/reference'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: referenceId
in: path
description: reference Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/reference:
get:
tags:
  - reference
description: Returns the relationship identifiers for reference
parameters:
  - name: filter[reference]
in: query
description: Filters the collection of reference using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - reference
id:
type: string
post:
tags:
  - reference
description: Adds items to the relationship reference
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - reference
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - reference
id:
type: string
delete:
tags:
  - reference
description: Deletes items from the relationship reference
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - reference
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - reference
description: Replaces the relationship reference
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - reference
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/schedule:
get:
tags:
  - schedule
description: Returns the relationship schedule
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - cron
  - '-cron'
  - description
  - '-description'
  - enabled
  - '-enabled'
  - tcl
  - '-tcl'
  - templateReference
  - '-templateReference'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[schedule]
in: query
description: Selects the set of schedule fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - cron
  - description
  - enabled
  - tcl
  - templateReference
  - updatedBy
  - updatedDate
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
  - name: filter[schedule]
in: query
description: Filters the collection of schedule using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/schedule'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - schedule
description: Creates an item of type schedule and adds it to schedule
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/schedule'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/schedule'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/schedule/{scheduleId}:
get:
tags:
  - schedule
description: Returns an instance of type schedule
parameters:
  - name: fields[schedule]
in: query
description: Selects the set of schedule fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - cron
  - description
  - enabled
  - tcl
  - templateReference
  - updatedBy
  - updatedDate
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/schedule'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - schedule
description: Deletes an instance of type schedule
responses:
'204':
description: Successful response
patch:
tags:
  - schedule
description: Modifies an instance of type schedule
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/schedule'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: scheduleId
in: path
description: schedule Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/schedule:
get:
tags:
  - schedule
description: Returns the relationship identifiers for schedule
parameters:
  - name: filter[schedule]
in: query
description: Filters the collection of schedule using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - schedule
id:
type: string
post:
tags:
  - schedule
description: Adds items to the relationship schedule
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - schedule
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - schedule
id:
type: string
delete:
tags:
  - schedule
description: Deletes items from the relationship schedule
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - schedule
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - schedule
description: Replaces the relationship schedule
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - schedule
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/ssh:
get:
tags:
  - ssh
description: Returns the relationship ssh
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - name
  - '-name'
  - privateKey
  - '-privateKey'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[ssh]
in: query
description: Selects the set of ssh fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - privateKey
  - sshType
  - updatedBy
  - updatedDate
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - name: filter[ssh]
in: query
description: Filters the collection of ssh using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - ssh
description: Creates an item of type ssh and adds it to ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/ssh/{sshId}:
get:
tags:
  - ssh
description: Returns an instance of type ssh
parameters:
  - name: fields[ssh]
in: query
description: Selects the set of ssh fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - description
  - name
  - privateKey
  - sshType
  - updatedBy
  - updatedDate
  - organization
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - ssh
description: Deletes an instance of type ssh
responses:
'204':
description: Successful response
patch:
tags:
  - ssh
description: Modifies an instance of type ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/ssh'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: sshId
in: path
description: ssh Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/ssh:
get:
tags:
  - ssh
description: Returns the relationship identifiers for ssh
parameters:
  - name: filter[ssh]
in: query
description: Filters the collection of ssh using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
patch:
tags:
  - ssh
description: Replaces the relationship ssh
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/variable:
get:
tags:
  - variable
description: Returns the relationship variable
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - description
  - '-description'
  - hcl
  - '-hcl'
  - key
  - '-key'
  - sensitive
  - '-sensitive'
  - value
  - '-value'
  - id
  - '-id'
  - name: fields[variable]
in: query
description: Selects the set of variable fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
  - name: filter[variable]
in: query
description: Filters the collection of variable using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/variable'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - variable
description: Creates an item of type variable and adds it to variable
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/variable'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/variable'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/variable/{variableId}:
get:
tags:
  - variable
description: Returns an instance of type variable
parameters:
  - name: fields[variable]
in: query
description: Selects the set of variable fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - category
  - description
  - hcl
  - key
  - sensitive
  - value
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/variable'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - variable
description: Deletes an instance of type variable
responses:
'204':
description: Successful response
patch:
tags:
  - variable
description: Modifies an instance of type variable
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/variable'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: variableId
in: path
description: variable Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/variable:
get:
tags:
  - variable
description: Returns the relationship identifiers for variable
parameters:
  - name: filter[variable]
in: query
description: Filters the collection of variable using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - variable
id:
type: string
post:
tags:
  - variable
description: Adds items to the relationship variable
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - variable
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - variable
id:
type: string
delete:
tags:
  - variable
description: Deletes items from the relationship variable
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - variable
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - variable
description: Replaces the relationship variable
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - variable
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/vcs:
get:
tags:
  - vcs
description: Returns the relationship vcs
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - accessToken
  - '-accessToken'
  - apiUrl
  - '-apiUrl'
  - callback
  - '-callback'
  - clientId
  - '-clientId'
  - clientSecret
  - '-clientSecret'
  - createdBy
  - '-createdBy'
  - description
  - '-description'
  - endpoint
  - '-endpoint'
  - name
  - '-name'
  - privateKey
  - '-privateKey'
  - redirectUrl
  - '-redirectUrl'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[vcs]
in: query
description: Selects the set of vcs fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - accessToken
  - apiUrl
  - callback
  - clientId
  - clientSecret
  - connectionType
  - createdBy
  - createdDate
  - description
  - endpoint
  - name
  - privateKey
  - redirectUrl
  - status
  - updatedBy
  - updatedDate
  - vcsType
  - organization
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - workspace
  - name: filter[vcs]
in: query
description: Filters the collection of vcs using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - vcs
description: Creates an item of type vcs and adds it to vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/vcs/{vcsId}:
get:
tags:
  - vcs
description: Returns an instance of type vcs
parameters:
  - name: fields[vcs]
in: query
description: Selects the set of vcs fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - accessToken
  - apiUrl
  - callback
  - clientId
  - clientSecret
  - connectionType
  - createdBy
  - createdDate
  - description
  - endpoint
  - name
  - privateKey
  - redirectUrl
  - status
  - updatedBy
  - updatedDate
  - vcsType
  - organization
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - organization
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - vcs
description: Deletes an instance of type vcs
responses:
'204':
description: Successful response
patch:
tags:
  - vcs
description: Modifies an instance of type vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/vcs'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: vcsId
in: path
description: vcs Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/vcs:
get:
tags:
  - vcs
description: Returns the relationship identifiers for vcs
parameters:
  - name: filter[vcs]
in: query
description: Filters the collection of vcs using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
patch:
tags:
  - vcs
description: Replaces the relationship vcs
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/webhook:
get:
tags:
  - webhook
description: Returns the relationship webhook
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - remoteHookId
  - '-remoteHookId'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[webhook]
in: query
description: Selects the set of webhook fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - remoteHookId
  - updatedBy
  - updatedDate
  - events
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - events
  - workspace
  - name: filter[webhook]
in: query
description: Filters the collection of webhook using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - webhook
description: Creates an item of type webhook and adds it to webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/webhook/{webhookId}:
get:
tags:
  - webhook
description: Returns an instance of type webhook
parameters:
  - name: fields[webhook]
in: query
description: Selects the set of webhook fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - remoteHookId
  - updatedBy
  - updatedDate
  - events
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - events
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - webhook
description: Deletes an instance of type webhook
responses:
'204':
description: Successful response
patch:
tags:
  - webhook
description: Modifies an instance of type webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/webhook'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: webhookId
in: path
description: webhook Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/webhook:
get:
tags:
  - webhook
description: Returns the relationship identifiers for webhook
parameters:
  - name: filter[webhook]
in: query
description: Filters the collection of webhook using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - webhook
id:
type: string
patch:
tags:
  - webhook
description: Replaces the relationship webhook
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: object
properties:
type:
type: string
enum:
  - webhook
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/workspaceTag:
get:
tags:
  - workspacetag
description: Returns the relationship workspaceTag
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - tagId
  - '-tagId'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[workspacetag]
in: query
description: Selects the set of workspacetag fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - tagId
  - updatedBy
  - updatedDate
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
  - name: filter[workspacetag]
in: query
description: Filters the collection of workspacetag using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/workspacetag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - workspacetag
description: Creates an item of type workspacetag and adds it to workspaceTag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspacetag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspacetag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/workspaceTag/{workspacetagId}:
get:
tags:
  - workspacetag
description: Returns an instance of type workspacetag
parameters:
  - name: fields[workspacetag]
in: query
description: Selects the set of workspacetag fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - tagId
  - updatedBy
  - updatedDate
  - workspace
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - workspace
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspacetag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - workspacetag
description: Deletes an instance of type workspacetag
responses:
'204':
description: Successful response
patch:
tags:
  - workspacetag
description: Modifies an instance of type workspacetag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/workspacetag'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: workspacetagId
in: path
description: workspacetag Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/relationships/workspaceTag:
get:
tags:
  - workspacetag
description: Returns the relationship identifiers for workspaceTag
parameters:
  - name: filter[workspacetag]
in: query
description: Filters the collection of workspacetag using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspacetag
id:
type: string
post:
tags:
  - workspacetag
description: Adds items to the relationship workspaceTag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspacetag
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspacetag
id:
type: string
delete:
tags:
  - workspacetag
description: Deletes items from the relationship workspaceTag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspacetag
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - workspacetag
description: Replaces the relationship workspaceTag
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspacetag
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job/{jobId}/address:
get:
tags:
  - address
description: Returns the relationship address
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - '-createdBy'
  - name
  - '-name'
  - updatedBy
  - '-updatedBy'
  - id
  - '-id'
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[address]
in: query
description: Filters the collection of address using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - address
description: Creates an item of type address and adds it to address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job/{jobId}/address/{addressId}:
get:
tags:
  - address
description: Returns an instance of type address
parameters:
  - name: fields[address]
in: query
description: Selects the set of address fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - createdBy
  - createdDate
  - name
  - updatedBy
  - updatedDate
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - address
description: Deletes an instance of type address
responses:
'204':
description: Successful response
patch:
tags:
  - address
description: Modifies an instance of type address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/address'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
  - name: addressId
in: path
description: address Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job/{jobId}/relationships/address:
get:
tags:
  - address
description: Returns the relationship identifiers for address
parameters:
  - name: filter[address]
in: query
description: Filters the collection of address using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
post:
tags:
  - address
description: Adds items to the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
delete:
tags:
  - address
description: Deletes items from the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - address
description: Replaces the relationship address
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job/{jobId}/step:
get:
tags:
  - step
description: Returns the relationship step
parameters:
  - name: sort
in: query
description: Sorts the collection on the selected attributes.  A prefix of '-' sorts descending
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - '-name'
  - output
  - '-output'
  - stepNumber
  - '-stepNumber'
  - id
  - '-id'
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
  - name: filter[step]
in: query
description: Filters the collection of step using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
post:
tags:
  - step
description: Creates an item of type step and adds it to step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job/{jobId}/step/{stepId}:
get:
tags:
  - step
description: Returns an instance of type step
parameters:
  - name: fields[step]
in: query
description: Selects the set of step fields that should be returned in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - name
  - output
  - status
  - stepNumber
  - job
  - name: include
in: query
description: Selects the set of relationships that should be expanded as a compound document in the result.
style: form
explode: false
schema:
type: array
items:
type: string
enum:
  - job
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
delete:
tags:
  - step
description: Deletes an instance of type step
responses:
'204':
description: Successful response
patch:
tags:
  - step
description: Modifies an instance of type step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
$ref: '#/components/schemas/step'
included:
uniqueItems: true
type: array
description: Included resources
items:
type: object
properties:
type:
type: string
id:
type: string
attributes:
type: object
relationships:
type: object
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
  - name: stepId
in: path
description: step Identifier
required: true
schema:
type: string
/workspace/{workspaceId}/job/{jobId}/relationships/step:
get:
tags:
  - step
description: Returns the relationship identifiers for step
parameters:
  - name: filter[step]
in: query
description: Filters the collection of step using a 'disjoint' RSQL expression
schema:
type: string
  - name: page[number]
in: query
description: Number of pages to return.  Can be used with page[size]
schema:
type: integer
format: int32
  - name: page[size]
in: query
description: Number of elements per page.  Can be used with page[number]
schema:
type: integer
format: int32
  - name: page[offset]
in: query
description: Offset from 0 to start paginating.  Can be used with page[limit]
schema:
type: integer
format: int32
  - name: page[limit]
in: query
description: Maximum number of items to return.  Can be used with page[offset]
schema:
type: integer
format: int32
  - name: page[totals]
in: query
description: For requesting total pages/records be included in the response page meta data
schema:
type: string
responses:
'200':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
post:
tags:
  - step
description: Adds items to the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'201':
description: Successful response
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
delete:
tags:
  - step
description: Deletes items from the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'204':
description: Successful response
patch:
tags:
  - step
description: Replaces the relationship step
requestBody:
content:
application/vnd.api+json:
schema:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
responses:
'204':
description: Successful response
parameters:
  - name: workspaceId
in: path
description: workspace Identifier
required: true
schema:
type: string
  - name: jobId
in: path
description: job Identifier
required: true
schema:
type: string
/operations:
post:
tags:
  - atomic
description: Perform atomic operations
requestBody:
content:
application/vnd.api+json; ext="https://jsonapi.org/ext/atomic":
schema:
type: object
properties:
atomic:operations:
type: array
items:
required:
  - op
type: object
properties:
op:
type: string
enum:
  - add
  - update
  - remove
ref:
type: object
properties:
type:
type: string
id:
type: string
lid:
type: string
relationship:
type: string
href:
type: string
data:
anyOf:
  - type: array
items:
type: object
properties:
type:
type: string
id:
type: string
lid:
type: string
attributes:
type: object
nullable: true
  - type: object
properties:
type:
type: string
id:
type: string
lid:
type: string
attributes:
type: object
nullable: true
meta:
type: object
allOf:
  - not:
required:
  - ref
  - href
type: object
example:
atomic:operations:
  - op: add
href: /action
data:
type: action
lid: string
attributes:
action: string
category: string
createdBy: string
description: string
displayCriteria: string
label: string
name: string
type: string
updatedBy: string
version: string
meta: {}
examples:
Creating Resources:
description: To create a resource, the operation MUST include an op code of "add" as well as a resource object as data. The resource object MUST contain at least a type member. An operation that creates a resource MAY target a resource collection through the operation's href member.
value:
atomic:operations:
  - op: add
href: /action
data:
type: action
lid: string
attributes:
action: string
category: string
createdBy: string
description: string
displayCriteria: string
label: string
name: string
type: string
updatedBy: string
version: string
meta: {}
Updating Resources:
description: To update a resource, the operation MUST include an op code of "update" as well as a resource object as data. An operation that updates a resource MAY target that resource through the operation's ref or href members, but not both.
value:
atomic:operations:
  - op: update
data:
type: action
id: string
attributes:
action: string
category: string
createdBy: string
description: string
displayCriteria: string
label: string
name: string
type: string
updatedBy: string
version: string
meta: {}
Deleting Resources:
description: To delete a resource, the operation MUST include an op code of "remove". An operation that deletes a resource MUST target that resource through the operation's ref or href members, but not both.
value:
atomic:operations:
  - op: remove
ref:
type: action
id: string
Updating To-One Relationships:
description: To assign a to-one relationship, the operation MUST include an op code of "update" as well as a resource identifier object as data. An operation that updates a resource's to-one relationship MUST target that relationship through the operation's ref or href members, but not both.
value:
atomic:operations:
  - op: update
ref:
type: articles
id: '13'
relationship: author
data:
type: people
id: '9'
Deleting To-One Relationships:
description: To clear a to-one relationship, the operation MUST include an op code of "update" as well as setting the data to "null". An operation that updates a resource's to-one relationship MUST target that relationship through the operation's ref or href members, but not both.
value:
atomic:operations:
  - op: update
ref:
type: articles
id: '13'
relationship: author
data: null
Creating To-Many Relationships:
description: To add members to a to-many relationship, the operation MUST include an op code of "add" as well as an array of resource identifier objects as data. An operation that updates a resource's to-many relationship MUST target that relationship through the operation's ref or href members, but not both.
value:
atomic:operations:
  - op: add
ref:
type: articles
id: '1'
relationship: comments
data:
  - type: comments
id: '1'
Updating To-Many Relationships:
description: To replace all the members of a to-many relationship, the operation MUST include an op code of "update" as well as an array of resource identifier objects as data. An operation that updates a resource's to-many relationship MUST target that relationship through the operation's ref or href members, but not both.
value:
atomic:operations:
  - op: update
ref:
type: articles
id: '1'
relationship: tags
data:
  - type: tags
id: '2'
  - type: tags
id: '3'
Deleting To-Many Relationships:
description: To remove members from a to-many relationship, the operation MUST include an op code of "remove" as well as an array of resource identifier objects as data. An operation that updates a resource's to-many relationship MUST target that relationship through the operation's ref or href members, but not both.
value:
atomic:operations:
  - op: remove
ref:
type: articles
id: '1'
relationship: comments
data:
  - type: comments
id: '12'
  - type: comments
id: '13'
responses:
'200':
description: Successful response
content:
application/vnd.api+json; ext="https://jsonapi.org/ext/atomic":
schema:
type: object
properties:
atomic:results:
type: array
items:
type: object
properties:
data:
type: object
properties:
link:
type: object
type:
type: string
id:
type: string
attributes:
type: object
'400':
description: Bad request
content:
application/vnd.api+json; ext="https://jsonapi.org/ext/atomic":
schema:
type: array
items:
type: object
properties:
id:
type: string
links:
type: object
properties:
about:
type: string
type:
type: string
status:
type: string
code:
type: string
title:
type: string
detail:
type: string
source:
type: object
properties:
pointer:
type: string
parameter:
type: string
header:
type: string
'423':
description: Locked
content:
application/vnd.api+json; ext="https://jsonapi.org/ext/atomic":
schema:
type: array
items:
type: object
properties:
id:
type: string
links:
type: object
properties:
about:
type: string
type:
type: string
status:
type: string
code:
type: string
title:
type: string
detail:
type: string
source:
type: object
properties:
pointer:
type: string
parameter:
type: string
header:
type: string
components:
schemas:
access:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (user is a superuser)
Delete Permissions : (user is a superuser)
id:
type: string
attributes:
type: object
properties:
manageJob:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageState:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageWorkspace:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
name:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
action:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (user is a superuser)
Delete Permissions : (user is a superuser)
id:
type: string
attributes:
type: object
properties:
action:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
active:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
category:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
createdBy:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
description:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
displayCriteria:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
label:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
name:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
type:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
version:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
relationships:
type: object
address:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
readOnly: false
writeOnly: false
example: null
name:
type: string
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
job:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
readOnly: false
writeOnly: false
example: null
agent:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (user is a superuser)
Delete Permissions : (user is a superuser)
id:
type: string
attributes:
type: object
properties:
description:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
name:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
url:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
collection:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (team manage collection)
Delete Permissions : (team manage collection)
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
description:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
priority:
type: integer
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
format: int32
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
item:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - item
id:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
reference:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - reference
id:
type: string
description: |-
Read Permissions : (team view collection)
Update Permissions : (team manage collection)
readOnly: false
writeOnly: false
example: null
github_app_token:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
appId:
type: string
readOnly: false
writeOnly: false
example: null
createdBy:
type: string
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
readOnly: false
writeOnly: false
example: null
installationId:
type: string
readOnly: false
writeOnly: false
example: null
owner:
type: string
readOnly: false
writeOnly: false
example: null
token:
type: string
description: 'Read Permissions : (read github app installation token)'
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
globalvar:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (user is a superuser)
Delete Permissions : (user is a superuser)
id:
type: string
attributes:
type: object
properties:
category:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
enum:
  - TERRAFORM
  - ENV
example: null
description:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
hcl:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
key:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
sensitive:
type: boolean
description: 'Update Permissions : (admin update secret)'
readOnly: false
writeOnly: false
example: null
value:
type: string
description: |-
Read Permissions : (admin read secret)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
history:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (user is a super service)
Delete Permissions : (user is a super service)
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
jobReference:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
lineage:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
md5:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
output:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
serial:
type: integer
description: 'Update Permissions : (user is a super service)'
format: int32
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
description: 'Update Permissions : (user is a super service)'
readOnly: false
writeOnly: false
example: null
implementation:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
arch:
type: string
readOnly: false
writeOnly: false
example: null
asciiArmor:
type: string
readOnly: false
writeOnly: false
example: null
downloadUrl:
type: string
readOnly: false
writeOnly: false
example: null
filename:
type: string
readOnly: false
writeOnly: false
example: null
keyId:
type: string
readOnly: false
writeOnly: false
example: null
os:
type: string
readOnly: false
writeOnly: false
example: null
shasum:
type: string
readOnly: false
writeOnly: false
example: null
shasumsSignatureUrl:
type: string
readOnly: false
writeOnly: false
example: null
shasumsUrl:
type: string
readOnly: false
writeOnly: false
example: null
source:
type: string
readOnly: false
writeOnly: false
example: null
sourceUrl:
type: string
readOnly: false
writeOnly: false
example: null
trustSignature:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
version:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - version
id:
type: string
readOnly: false
writeOnly: false
example: null
item:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
category:
type: string
readOnly: false
writeOnly: false
enum:
  - TERRAFORM
  - ENV
example: null
description:
type: string
readOnly: false
writeOnly: false
example: null
hcl:
type: boolean
readOnly: false
writeOnly: false
example: null
key:
type: string
readOnly: false
writeOnly: false
example: null
sensitive:
type: boolean
readOnly: false
writeOnly: false
example: null
value:
type: string
description: 'Read Permissions : (user read collection)'
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
collection:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
readOnly: false
writeOnly: false
example: null
job:
type: object
properties:
type:
type: string
description: 'Create Permissions : (team manage job OR team limited manage job)'
id:
type: string
attributes:
type: object
properties:
approvalTeam:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (user is a super service)
readOnly: false
writeOnly: false
example: null
comments:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
commitId:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
createdBy:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
output:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
overrideBranch:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
planChanges:
type: boolean
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
refresh:
type: boolean
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
refreshOnly:
type: boolean
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
status:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team approve job OR user is a super service)
readOnly: false
writeOnly: false
enum:
  - pending
  - waitingApproval
  - approved
  - queue
  - running
  - completed
  - noChanges
  - notExecuted
  - rejected
  - cancelled
  - failed
  - unknown
example: null
tcl:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
templateReference:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
terraformPlan:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
via:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
address:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - address
id:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
step:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - step
id:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (user is a super service)
readOnly: false
writeOnly: false
example: null
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
description: |-
Read Permissions : (team view job OR team limited view job)
Update Permissions : (team manage job OR team limited manage job OR user is a super service)
readOnly: false
writeOnly: false
example: null
module:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (team manage module)
Delete Permissions : (team manage module)
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
description:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
downloadQuantity:
type: integer
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
format: int32
readOnly: false
writeOnly: false
example: null
folder:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
latestVersion:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
provider:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
registryPath:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
source:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
tagPrefix:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
ssh:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
vcs:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
version:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module_version
id:
type: string
description: |-
Read Permissions : (team view module)
Update Permissions : (team manage module OR user is a super service)
readOnly: false
writeOnly: false
example: null
module_version:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
commit:
type: string
readOnly: false
writeOnly: false
example: null
version:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
module:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module
id:
type: string
readOnly: false
writeOnly: false
example: null
organization:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (user is a superuser)
Delete Permissions : (user is a superuser)
id:
type: string
attributes:
type: object
properties:
description:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
disabled:
type: boolean
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
executionMode:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
icon:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
agent:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
collection:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
globalvar:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - globalvar
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
job:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
module:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - module
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
provider:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - provider
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
ssh:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
tag:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - tag
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
team:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - team
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
template:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - template
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
vcs:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
description: |-
Read Permissions : (user belongs organization)
Update Permissions : (user belongs organization)
readOnly: false
writeOnly: false
example: null
provider:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (team manage provider)
Delete Permissions : (team manage provider)
id:
type: string
attributes:
type: object
properties:
description:
type: string
description: |-
Read Permissions : (team view provider)
Update Permissions : (team manage provider)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (team view provider)
Update Permissions : (team manage provider)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view provider)
Update Permissions : (team manage provider)
readOnly: false
writeOnly: false
example: null
version:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - version
id:
type: string
description: |-
Read Permissions : (team view provider)
Update Permissions : (team manage provider)
readOnly: false
writeOnly: false
example: null
reference:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
description:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
collection:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - collection
id:
type: string
readOnly: false
writeOnly: false
example: null
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
readOnly: false
writeOnly: false
example: null
schedule:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
readOnly: false
writeOnly: false
example: null
cron:
type: string
readOnly: false
writeOnly: false
example: null
description:
type: string
readOnly: false
writeOnly: false
example: null
enabled:
type: boolean
readOnly: false
writeOnly: false
example: null
tcl:
type: string
readOnly: false
writeOnly: false
example: null
templateReference:
type: string
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
readOnly: false
writeOnly: false
example: null
ssh:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (team manage ssh)
Delete Permissions : (team manage ssh)
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
description:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
privateKey:
type: string
description: |-
Read Permissions : (read private key)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
sshType:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
enum:
  - rsa
  - ed25519
example: null
updatedBy:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view ssh)
Update Permissions : (team manage ssh)
readOnly: false
writeOnly: false
example: null
step:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
name:
type: string
readOnly: false
writeOnly: false
example: null
output:
type: string
readOnly: false
writeOnly: false
example: null
status:
type: string
readOnly: false
writeOnly: false
enum:
  - pending
  - waitingApproval
  - approved
  - queue
  - running
  - completed
  - noChanges
  - notExecuted
  - rejected
  - cancelled
  - failed
  - unknown
example: null
stepNumber:
type: integer
format: int32
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
job:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
readOnly: false
writeOnly: false
example: null
tag:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
readOnly: false
writeOnly: false
example: null
name:
type: string
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
readOnly: false
writeOnly: false
example: null
team:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (user is a superuser)
Delete Permissions : (user is a superuser)
id:
type: string
attributes:
type: object
properties:
manageCollection:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageJob:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageModule:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageProvider:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageState:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageTemplate:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageVcs:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
manageWorkspace:
type: boolean
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
name:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: 'Update Permissions : (user is a superuser)'
readOnly: false
writeOnly: false
example: null
template:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (team manage template)
Delete Permissions : (team manage template)
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
description:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
tcl:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
version:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view template)
Update Permissions : (team manage template)
readOnly: false
writeOnly: false
example: null
variable:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
category:
type: string
readOnly: false
writeOnly: false
enum:
  - TERRAFORM
  - ENV
example: null
description:
type: string
readOnly: false
writeOnly: false
example: null
hcl:
type: boolean
readOnly: false
writeOnly: false
example: null
key:
type: string
readOnly: false
writeOnly: false
example: null
sensitive:
type: boolean
readOnly: false
writeOnly: false
example: null
value:
type: string
description: 'Read Permissions : (user read secret)'
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
readOnly: false
writeOnly: false
example: null
vcs:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (team manage vcs)
Delete Permissions : (team manage vcs)
id:
type: string
attributes:
type: object
properties:
accessToken:
type: string
description: |-
Read Permissions : (read access token)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
apiUrl:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
callback:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
clientId:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
clientSecret:
type: string
description: |-
Read Permissions : (read vcs secret)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
connectionType:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
enum:
  - OAUTH
  - STANDALONE
example: null
createdBy:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
description:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
endpoint:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
privateKey:
type: string
description: |-
Read Permissions : (read vcs secret)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
redirectUrl:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
status:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (user is a super service)
readOnly: false
writeOnly: false
enum:
  - PENDING
  - COMPLETED
  - ERROR
example: null
updatedBy:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
vcsType:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
enum:
  - GITHUB
  - GITLAB
  - BITBUCKET
  - AZURE_DEVOPS
  - AZURE_SP_MI
  - PUBLIC
example: null
relationships:
type: object
properties:
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
description: |-
Read Permissions : (team view vcs)
Update Permissions : (team manage vcs)
readOnly: false
writeOnly: false
example: null
version:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
protocols:
type: string
readOnly: false
writeOnly: false
example: null
versionNumber:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
implementation:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - implementation
id:
type: string
readOnly: false
writeOnly: false
example: null
provider:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - provider
id:
type: string
readOnly: false
writeOnly: false
example: null
webhook:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
readOnly: false
writeOnly: false
example: null
remoteHookId:
type: string
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
events:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook_event
id:
type: string
readOnly: false
writeOnly: false
example: null
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
readOnly: false
writeOnly: false
example: null
webhook_event:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
branch:
type: string
readOnly: false
writeOnly: false
example: null
createdBy:
type: string
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
readOnly: false
writeOnly: false
example: null
event:
type: string
readOnly: false
writeOnly: false
enum:
  - PUSH
  - PULL_REQUEST
  - PING
  - RELEASE
  - UNKNOWN
example: null
path:
type: string
readOnly: false
writeOnly: false
example: null
priority:
type: integer
format: int32
readOnly: false
writeOnly: false
example: null
templateId:
type: string
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
webhook:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook
id:
type: string
readOnly: false
writeOnly: false
example: null
workspace:
type: object
properties:
type:
type: string
description: |-
Create Permissions : (team manage workspace)
Delete Permissions : (team manage workspace)
id:
type: string
attributes:
type: object
properties:
allowRemoteApply:
type: boolean
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
branch:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
createdBy:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
defaultTemplate:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
deleted:
type: boolean
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
description:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
executionMode:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
folder:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
iacType:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
lockDescription:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
locked:
type: boolean
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
moduleSshKey:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
name:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
source:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
terraformVersion:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
access:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - access
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (user is a superuser)
readOnly: false
writeOnly: false
example: null
agent:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - agent
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
history:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - history
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (user is a super service)
readOnly: false
writeOnly: false
example: null
job:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - job
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team view workspace OR team limited view workspace)
readOnly: false
writeOnly: false
example: null
organization:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - organization
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
reference:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - reference
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
schedule:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - schedule
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
ssh:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - ssh
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
variable:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - variable
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
vcs:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - vcs
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
webhook:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - webhook
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
workspaceTag:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspacetag
id:
type: string
description: |-
Read Permissions : (team view workspace OR team limited view workspace)
Update Permissions : (team manage workspace OR team limited manage workspace)
readOnly: false
writeOnly: false
example: null
workspacetag:
type: object
properties:
type:
type: string
description: ''
id:
type: string
attributes:
type: object
properties:
createdBy:
type: string
readOnly: false
writeOnly: false
example: null
createdDate:
type: string
readOnly: false
writeOnly: false
example: null
tagId:
type: string
readOnly: false
writeOnly: false
example: null
updatedBy:
type: string
readOnly: false
writeOnly: false
example: null
updatedDate:
type: string
readOnly: false
writeOnly: false
example: null
relationships:
type: object
properties:
workspace:
type: object
properties:
data:
type: array
items:
type: object
properties:
type:
type: string
enum:
  - workspace
id:
type: string
readOnly: false
writeOnly: false
example: null
